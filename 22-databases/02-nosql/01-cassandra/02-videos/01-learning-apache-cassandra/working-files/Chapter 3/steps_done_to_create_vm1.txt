At a high level, these are the steps that were done to create virtual machine 1:1.	Acquired VMware Fusion (to be able to create a virtual machine).2.	Acquired Ubuntu ISO disk image (to have an operating system as a base for creating a virtual machine).3.	Used VMware Fusion to create a virtual machine from the disk image.4.	Installed vim (a text editor) on the virtual machine.5.	Installed curl (for referencing URLs on the command line).6.	Installed Oracle JDK (to be able to create and run Java applications).7.	Installed Apache Maven (for managing dependencies when developing an application).8.	Installed Eclipse (to have a development environment for writing a Java application).9.	Installed Tomcat (to be able to host and serve a Java application).10.	Downloaded Apache Cassandra to the virtual machine.Note: It is not necessary to build the virtual machine yourself. It is provided with the Working Files.—-Steps that were done to create virtual machine 1:1.	Acquired and installed VMware Fusion.2.	Downloaded the Ubuntu ISO file (64-bit Ubuntu 12.04 LTS used), from http://www.ubuntu.com/download/desktop. Created a virtual machine in VMware Fusion using the Ubuntu ISO file:3.	In VMware Fusion, selected File – New….4.	With Install from disc or image selected, clicked the Continue button.5.	Clicked the Use another disc or disc image… button.6.	Selected the ISO image downloaded in step 2.7.	Clicked the Continue button. 8.	For Display Name, entered vm1.9.	For Account Name, entered vm1.10.	For Password, entered ubuntu.11.	For Confirm Password, entered ubuntu.12.	Left the checkbox for Make your home folder accessible to the virtual machine deselected.13.	Clicked Continue.14.	Clicked the Download Tools button. (Does not show if they have already been downloaded.)15.	Clicked the Customize Settings button.16.	Entered Virtual Machine 1 as the file name. 17.	Clicked Save.18.	Double-clicked the Processors & Memory icon.19.	Increased the memory to 1536 MB.20.	Closed the Processors & Memory window.21.	Clicked the Play button, to start the virtual machine.22.	Watched the virtual machine install needed files.23.	When prompted, entered ubuntu for Password.24.	In the upper-right corner, under the gear icon, selected Displays….25.	For Resolution, selected 1024 x 768.26.	Clicked Apply.27.	Clicked Keep This Configuration.28.	Closed the Displays window. (Hovered over Displays in the upper-left corner to be able to see the close button.)Installed text editor vim: 29.	Opened a terminal window by clicking the Dash Home icon (upper-left), and typing Ter to then select the Terminal application.30.	At the command prompt, entered sudo apt-get install vim to install vim.31.	Entered the sudo password of ubuntu when prompted.32.	Entered Y when prompted.Installed curl (for referencing URLs on the command line): 33.	At the command prompt, entered sudo apt-get install curl to install curl.Downloaded and installed Oracle JDK, for allowing Cassandra to run (Oracle JRE or JDK required), and to be able to create Java applications (Unit 9, JDK required):34.	In the virtual machine, opened a browser (Firefox icon, on the left) and navigated to http://www.oracle.com/technetwork/java/javase/downloads.35.	Clicked on the Download button for JDK 7.36.	Selected the Accept License Agreement radio button.37.	For Linux x64, clicked the jdk-7u55-linux-x64.tar.gz link, to download the tarball file.38.	Selected the Save File radio button.39.	Clicked OK, to download the tarball to the Downloads directory.40.	In the terminal window, entered cd Downloads to navigate to the Downloads directory.41.	Entered ls, to see that the JDK tarball is there.
42.	Entered sudo mkdir -p /usr/local/java to create a directory for the JDK.43.	Entered sudo mv jdk-7u55-linux-x64.tar.gz /usr/local/java to move the tarball to the java directory.44.	Entered cd /usr/local/java to navigate to the java directory.45.	Entered ls to see the tarball file.46.	Entered sudo tar zxvf jdk-7u55-linux-x64.tar.gz to unpack the tarball.47.	Entered ls to see the unpacked directory:48.	Entered ls jdk1.7.0_55 to see the jre subdirectory (to see that the JRE is included with the JDK).49.	Entered sudo update-alternatives --install  "/usr/bin/java" "java" "/usr/local/java/jdk1.7.0_55/bin/java" 1 so that Ubuntu knows about the new Java runtime.50.	Entered java -version to check that Oracle JRE is being used as the default runtime.51.	Entered sudo update-alternatives --install  "/usr/bin/javac" "javac" "/usr/local/java/jdk1.7.0_55/bin/javac" 1 so that Ubuntu knows about the new Java compiler.52.	Entered javac -version to check that Oracle JDK is being used as the default compiler. Modified JAVA_HOME and JDK_HOME in the java.sh file so that java -version and javac -version would still reference Oracle JRE and JDK even after a restart:53.	At the command prompt, entered sudo vim /etc/profile.d/java.sh.54.	Pressed i (insert), to edit the file.55.	Typed export JDK_HOME=/usr/local/java/jdk1.7.0_55.56.	Pressed the Enter key to create a new line.57.	Typed export JAVA_HOME=/usr/local/java/jdk1.7.0_55.58.	Pressed the Esc key and then entered :wq to save the file and quit.59.	Back at the command prompt, entered sudo chmod +x /etc/profile.d/java.sh to change the permissions for the java.sh file, so that it could be executed.60.	Entered source /etc/profile.d/java.sh to execute the file.61.	Entered echo $JAVA_HOME to see that the JAVA_HOME variable has been set to the location of the Oracle JDK.62.	Closed all windows in the virtual machine and selected Virtual Machine – Restart, to restart the virtual machine.63.	Waited for the virtual machine to restart.64.	When prompted to log in, entered ubuntu as the password.65.	Opened a terminal window.66.	Entered java -version to see that it is still set up.67.	Entered javac -version to see that it is still set up. Installed Apache Maven, a software build tool that manages dependencies (optionally used in Unit 9, when creating a Java application that uses the DataStax Java driver to communicate with a Cassandra cluster):68.	At the command prompt, entered sudo apt-get install maven2.69.	Entered ubuntu when prompted for the sudo password.70.	Entered Y when prompted.71.	Waited for Maven to install.72.	Entered mvn -version to see that Maven installed.73.	Entered java -version to check the default runtime.74.	Noticed that the Maven installation changed the default runtime to OpenJDK.75.	Entered sudo update-alternatives --config java to change the default Java runtime.76.	Entered 2, to select the Oracle runtime (installed at /usr/local/java/jdk1.7.0_55/bin/java).77.	Entered java -version to see that the default runtime is back to using the Oracle Java runtime.78.	Entered sudo apt-get remove openjdk* to remove OpenJDK from the virtual machine.79.	Entered Y when prompted.Installed Eclipse, a development environment commonly used for creating Java applications (used in Unit 9):80.	Inside the virtual machine, opened a browser window and navigated to https://www.eclipse.org/downloads.81.	To the right of Eclipse IDE for Java EE Developers, clicked the Linux 64 Bit link.82.	Clicked the green download arrow, selected the Save File radio button, and clicked the OK button, to download the Eclipse tarball file to the Downloads directory.83.	Watched the status icon in the upper-right corner, waiting until the Eclipse tarball finished downloading.
84.	In the terminal window, entered cd ~/Downloads to navigate to the Downloads directory.85.	Entered ls to see that the Eclipse tarball was there.86.	Entered cd to navigate to the default home directory (/home/vm1).87.	Entered sudo mv ~/Downloads/eclipse-jee-kepler-SR2-linux-gtk-x86_64.tar.gz . to move the Eclipse tarball to the default home directory.88.	Entered tar xvf eclipse-jee (and the Tab key, to autocomplete) to unpack the tarball.89.	Entered cd eclipse, to navigate to the unpacked eclipse directory.90.	Entered ./eclipse, to start the Eclipse application.91.	In the Workspace Launcher window, clicked OK to accept the default workspace directory.92.	Clicked the X in the Welcome tab, to close the Welcome window. Installed Apache Tomcat (used in Unit 9), a web server and servlet container, from within Eclipse:93.	Still in Eclipse, selected File – New – Dynamic Web Project.94.	For Project name, entered temporary.95.	In the Target runtime section, clicked the New Runtime… button.96.	 In the list of versions, selected Apache Tomcat v7.0.97.	Selected the checkbox for Create a new local server.98.	Clicked Next.99.	In the Tomcat installation directory section, click the Download and Install… button.100.	Selected the radio button for I accept the terms of the license agreement and clicked Finish.101.	Selected the vm1 folder (on the left) and clicked OK.102.	Noticed that the Finish button was dimmed out until Tomcat was done installing.103.	After the Finish button became available, selected it.104.	Clicked the Cancel button (to get out of the project wizard).105.	In the left panel, notice the Servers folder with Tomcat v7.0 Server inside it.106.	Close Eclipse.Downloaded the Apache Cassandra tarball to the virtual machine:107.	In the virtual machine, in the browser window, navigated to http://cassandra.apache.org.108.	Clicked the Download options link, to go to the download page.109.	Clicked the apache-cassandra-2.0.7-bin.tar.gz link.110.	Noticed the list of mirror sites. 111.	Clicked the first link, to use the suggested download server.112.	Left the Save File radio button selected, and clicked OK.113.	In a terminal window, entered ls ~/Downloads to see that the tarball downloaded.Copied the Files folder to the virtual machine's desktop:114.	Copied the Files folder to the desktop of the virtual machine.Shut down and zipped the virtual machine:115.	Closed all of the open windows in the virtual machine.116.	Selected Virtual Machine – Shut Down.117.	Clicked the Shut Down button.118.	Closed the window for the virtual machine.119.	Selected VMware Fusion – Quit VMware Fusion.120.	Located the saved virtual machine file (Virtual Machine 1).121.	Zipped the virtual machine file, to make it smaller for distribution.